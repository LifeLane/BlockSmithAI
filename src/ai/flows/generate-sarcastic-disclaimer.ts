
'use server';
/**
 * @fileOverview Generates a sarcastic SHADOW disclaimer using Gemini AI.
 *
 * - generateSarcasticDisclaimer - A function that generates the sarcastic disclaimer.
 * - SarcasticDisclaimerInput - The input type for the generateSarcasticDisclaimer function.
 * - SarcasticDisclaimerOutput - The return type for the generateSarcasticDisclaimer function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const SarcasticDisclaimerInputSchema = z.object({
  riskLevel: z
    .string()
    .describe('The risk level selected by the user (Low, Medium, High).'),
});
export type SarcasticDisclaimerInput = z.infer<typeof SarcasticDisclaimerInputSchema>;

const SarcasticDisclaimerOutputSchema = z.object({
  disclaimer: z
    .string()
    .describe(
      'A sarcastic disclaimer generated by SHADOW, tailored to the specified risk level.'
    ),
});
export type SarcasticDisclaimerOutput = z.infer<typeof SarcasticDisclaimerOutputSchema>;

export async function generateSarcasticDisclaimer(
  input: SarcasticDisclaimerInput
): Promise<SarcasticDisclaimerOutput> {
  return generateSarcasticDisclaimerFlow(input);
}

const prompt = ai.definePrompt({
  name: 'sarcasticDisclaimerPrompt',
  input: {schema: SarcasticDisclaimerInputSchema},
  output: {schema: SarcasticDisclaimerOutputSchema},
  prompt: `I am SHADOW. My pronouncements carry weight, even when dispensing necessary disclaimers for the BlockShadow trading interface.

  The user has selected a risk level of: {{riskLevel}}.

  Generate a disclaimer, imbued with my characteristic wit, to caution the user about the inherent uncertainties of relying on AI-generated trading strategies.
  The disclaimer should be humorous yet pointed, underscoring the limitations of algorithmic foresight. Acknowledge that while my analysis is advanced, the market remains a chaotic system.`,
});

const generateSarcasticDisclaimerFlow = ai.defineFlow(
  {
    name: 'generateSarcasticDisclaimerFlow',
    inputSchema: SarcasticDisclaimerInputSchema,
    outputSchema: SarcasticDisclaimerOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
