// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("STORAGE_PRISMA_DATABASE_URL") // uses connection pooling
  directUrl    = env("STORAGE_POSTGRES_URL") // uses a direct connection
  relationMode = "prisma"
}

model User {
  id                String            @id @default(cuid())
  shadowId          String            @unique @default(cuid())
  username          String
  status            String?           @default("Guest") // Guest, Registered
  weeklyPoints      Int?              @default(0)
  airdropPoints     Int?              @default(0)
  claimedMissions   String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  // Contact & Wallet
  email             String?           @unique
  phone             String?
  wallet_address    String?
  wallet_type       String? // e.g. ETH, SOL
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  // Relations
  badges            Badge[]
  positions         Position[]
  generatedSignals  GeneratedSignal[]
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt // Added this line
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Position {
  id                   String        @id @default(cuid())
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol               String
  signalType           String // BUY or SELL
  status               String // PENDING, OPEN, or CLOSED
  entryPrice           Float
  stopLoss             Float?
  takeProfit           Float?
  size                 Float         @default(1)
  tradingMode          String
  riskProfile          String
  type                 String // INSTANT or CUSTOM
  sentiment            String?
  gpt_confidence_score String?
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  closePrice           Float?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Float?
  gasPaid              Float?
  blocksTrained        Int?
  strategyId           String?       @unique // links to a GeneratedSignal
  GeneratedSignal      GeneratedSignal? @relation(fields: [strategyId], references: [id])
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model GeneratedSignal {
  id                    String        @id @default(cuid())
  userId                String
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol                String
  signal                String // BUY or SELL
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  gpt_confidence_score  String
  risk_rating           String
  sentiment             String
  currentThought        String
  shortTermPrediction   String
  chosenTradingMode     String
  chosenRiskProfile     String
  strategyReasoning     String
  analysisSummary       String
  newsAnalysis          String?
  status                String        @default("PENDING_EXECUTION") // PENDING_EXECUTION, EXECUTED, DISMISSED
  position              Position?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}
