
'use client';

import { useState } from 'react';
import type { FunctionComponent } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  AreaChart,
  Target,
  ShieldX,
  LogIn,
  TrendingUp,
  TrendingDown,
  Hourglass,
  CheckCircle2,
  XCircle,
  CircleDotDashed,
  Info,
  Loader2,
  BrainCircuit,
  Newspaper,
  PlayCircle
} from 'lucide-react';
import { executeCustomSignalAction, type GenerateTradingStrategyOutput, type GenerateShadowChoiceStrategyOutput } from '@/app/actions';
import type { LiveMarketData } from '@/app/actions';
import { useToast } from "@/hooks/use-toast";
import { cn } from '@/lib/utils';
import { Button } from '../ui/button';

type AIStrategyOutput = (GenerateTradingStrategyOutput | GenerateShadowChoiceStrategyOutput) & { 
  id?: string;
  analysisSummary?: string | null;
  newsAnalysis?: string | null;
  chosenTradingMode?: string;
};

interface SignalTrackerProps {
  aiStrategy: AIStrategyOutput | null;
  liveMarketData: LiveMarketData | null;
  userId: string;
  onSimulateSuccess: () => void;
}

const SignalTracker: FunctionComponent<SignalTrackerProps> = ({ aiStrategy, liveMarketData, userId, onSimulateSuccess }) => {
  const [isSimulating, setIsSimulating] = useState(false);
  const { toast } = useToast();

  if (!aiStrategy || !aiStrategy.id) {
    return null;
  }
  
  const handleSimulate = async () => {
    if (!userId || !aiStrategy.id) {
        toast({ title: "Error", description: "User or Signal ID not found.", variant: "destructive" });
        return;
    }
    setIsSimulating(true);
    const result = await executeCustomSignalAction(aiStrategy.id, userId);
    if (result.position) {
        toast({
            title: <span className="text-accent">Signal Simulated!</span>,
            description: <span className="text-foreground">Your pending order for <strong className="text-primary">{aiStrategy.symbol}</strong> is now active. You are being redirected to your portfolio.</span>,
        });
        onSimulateSuccess();
    } else {
        toast({ title: "Simulation Failed", description: result.error, variant: "destructive" });
    }
    setIsSimulating(false);
  };

  const { signal, entry_zone, stop_loss, take_profit, currentThought, analysisSummary, newsAnalysis } = aiStrategy;

  const ParameterRow = ({ label, value, icon, valueClassName }: { label: string, value: string, icon: React.ReactNode, valueClassName?: string }) => (
    <div className="flex items-center justify-between p-3 bg-background/50 rounded-md shadow-sm border border-border/50">
        <span className="text-sm font-medium text-muted-foreground flex items-center">{icon}{label}</span>
        <span className={`font-mono text-sm font-semibold ${valueClassName}`}>{value}</span>
    </div>
  );

  // A 'custom' signal is one generated by Shadow's Choice, which needs manual simulation.
  const isCustomSignal = !!aiStrategy.chosenTradingMode;
  const isHoldSignal = signal?.toUpperCase() === 'HOLD';


  return (
    <Card className="shadow-md transition-all duration-300 ease-in-out hover:border-tertiary interactive-card">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center text-lg font-semibold text-foreground">
          <AreaChart className="mr-2 h-5 w-5 text-tertiary" />
          Signal Analysis: <span className="text-tertiary ml-1">{aiStrategy.symbol || 'N/A'}</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="parameters" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="parameters" className="data-[state=active]:shadow-active-tab-glow">Signal Parameters</TabsTrigger>
            <TabsTrigger value="analysis" className="data-[state=active]:shadow-active-tab-glow">SHADOW's Analysis</TabsTrigger>
          </TabsList>
          
          <TabsContent value="parameters" className="mt-4 space-y-3">
            <ParameterRow 
                label="Signal"
                value={signal || 'N/A'}
                icon={<Info className="h-4 w-4 mr-2" />}
                valueClassName={cn(signal === 'BUY' ? 'text-green-400' : signal === 'SELL' ? 'text-red-400' : 'text-muted-foreground')}
            />
            <ParameterRow 
                label="Entry Zone" 
                value={entry_zone ? `$${parseFloat(entry_zone).toFixed(2)}` : 'N/A'}
                icon={<LogIn className="h-4 w-4 mr-2 text-primary"/>}
                valueClassName="text-primary"
            />
            <ParameterRow 
                label="Stop Loss" 
                value={stop_loss ? `$${parseFloat(stop_loss).toFixed(2)}` : 'N/A'}
                icon={<ShieldX className="h-4 w-4 mr-2 text-red-400"/>}
                valueClassName="text-red-400"
            />
            <ParameterRow 
                label="Take Profit" 
                value={take_profit ? `$${parseFloat(take_profit).toFixed(2)}` : 'N/A'}
                icon={<Target className="h-4 w-4 mr-2 text-green-400"/>}
                valueClassName="text-green-400"
            />
          </TabsContent>

          <TabsContent value="analysis" className="mt-4 space-y-4">
             <div className="w-full space-y-2">
                <div className="flex items-center text-primary">
                    <BrainCircuit className="h-5 w-5 mr-2" />
                    <h4 className="font-semibold font-headline">Current Thought</h4>
                </div>
                <p className="text-xs text-muted-foreground pl-1 italic">"{currentThought}"</p>
            </div>
            {analysisSummary && (
                <div className="w-full space-y-2">
                    <div className="flex items-center text-primary">
                        <AreaChart className="h-5 w-5 mr-2" />
                        <h4 className="font-semibold font-headline">Technical Analysis</h4>
                    </div>
                    <p className="text-xs text-muted-foreground pl-1">{analysisSummary}</p>
                </div>
            )}
            {newsAnalysis && (
                <div className="w-full space-y-2">
                    <div className="flex items-center text-primary">
                        <Newspaper className="h-5 w-5 mr-2" />
                        <h4 className="font-semibold font-headline">News Context</h4>
                    </div>
                    <p className="text-xs text-muted-foreground pl-1">{newsAnalysis}</p>
                </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
      {!isHoldSignal && isCustomSignal && (
          <CardFooter className="pt-4 border-t border-border/50">
             <Button className="w-full glow-button" onClick={handleSimulate} disabled={isSimulating}>
                {isSimulating ? <Loader2 className="h-4 w-4 animate-spin"/> : <PlayCircle className="h-4 w-4 mr-2"/>}
                Simulate Signal
             </Button>
          </CardFooter>
      )}
    </Card>
  );
};

export default SignalTracker;
