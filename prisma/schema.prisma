
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  shadowId          String    @unique
  status            String
  weeklyPoints      Int       @default(0)
  airdropPoints     Int       @default(0)
  wallet_address    String?
  wallet_type       String?
  email             String?   @unique
  phone             String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  claimedMissions   String[]
  claimedSpecialOps String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  badges            Badge[]
  positions         Position[]
  generatedSignals  GeneratedSignal[]
  userAgents        UserAgent[]
}

model Badge {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  icon        String?
  users       User[]
  createdAt   DateTime @default(now())
}

model Position {
  id                  String         @id @default(uuid())
  symbol              String
  signalType          SignalType
  entryPrice          Float
  size                Float          @default(1)
  status              PositionStatus
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  expirationTimestamp DateTime?
  closePrice          Float?
  stopLoss            Float?
  takeProfit          Float?
  pnl                 Float?
  strategyId          String?
  user                User           @relation(fields: [userId], references: [id])
  userId              String
  generatedSignal     GeneratedSignal? @relation(fields: [strategyId], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model GeneratedSignal {
  id                    String                 @id @default(uuid())
  userId                String
  user                  User                   @relation(fields: [userId], references: [id])
  symbol                String
  signal                String
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  risk_rating           String
  gpt_confidence_score  String
  sentiment             String
  currentThought        String
  shortTermPrediction   String?
  sentimentTransition   String?
  chosenTradingMode     String
  chosenRiskProfile     String
  strategyReasoning     String?
  analysisSummary       String?
  newsAnalysis          String?
  disclaimer            String?
  type                  SignalGenerationType
  status                GeneratedSignalStatus
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  positions             Position[]
}

model UserAgent {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  agentId           String
  level             Int         @default(1)
  status            AgentStatus @default(IDLE)
  deploymentEndTime DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  @@unique([userId, agentId])
}

enum SignalType {
  BUY
  SELL
  HOLD
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
  CANCELLED
  EXPIRED
}

enum SignalGenerationType {
  INSTANT
  CUSTOM
}

enum GeneratedSignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
  ERROR
}

enum AgentStatus {
  IDLE
  DEPLOYED
}
