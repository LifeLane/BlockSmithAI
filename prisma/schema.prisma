// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------

// User Model: Core entity for users/traders
model User {
  id              String   @id @default(cuid())
  username        String?  @unique
  shadowId        String?  @unique
  status          String   @default("Guest") // e.g., Guest, Registered, Pro
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  claimedMissions String[]

  // Wallet and Contact info
  wallet_address  String?
  wallet_type     String?
  email           String?  @unique
  phone           String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?

  // Relations
  positions Position[]
  signals   GeneratedSignal[]
  badges    Badge[]
}

// Position Model: Represents an active or closed simulated trade
model Position {
  id                   String       @id @default(cuid())
  userId               String
  symbol               String
  signalType           String // "BUY" or "SELL"
  status               String // "PENDING", "OPEN", "CLOSED"
  entryPrice           Float
  stopLoss             Float?
  takeProfit           Float?
  size                 Float        @default(1)
  tradingMode          String
  riskProfile          String
  type                 String // "INSTANT" or "CUSTOM"
  sentiment            String?
  gpt_confidence_score String?
  createdAt            DateTime     @default(now())
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  closePrice           Float?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?
  strategyId           String?      @unique
  strategy             GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// GeneratedSignal Model: Represents a strategy generated by SHADOW, before execution
model GeneratedSignal {
  id                   String    @id @default(cuid())
  userId               String
  symbol               String
  signal               String // "BUY" or "SELL"
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  gpt_confidence_score String
  risk_rating          String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  sentimentTransition  String?
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String
  analysisSummary      String    @db.Text
  newsAnalysis         String?   @db.Text
  status               String // "PENDING_EXECUTION", "EXECUTED", "DISMISSED"
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  position Position?
}

// Badge Model: For achievements and special statuses
model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String // Corresponds to a Lucide icon name
  userId      String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
