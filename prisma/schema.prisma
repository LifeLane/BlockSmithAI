// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  username            String
  shadowId            String             @unique
  status              String // Guest, Registered
  weeklyPoints        Int                @default(0)
  airdropPoints       Int                @default(0)
  wallet_address      String?
  wallet_type         String?
  email               String?            @unique
  phone               String?
  x_handle            String?
  telegram_handle     String?
  youtube_handle      String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  claimedMissions     String[]
  claimedSpecialOps   String[]
  positions           Position[]
  generatedSignals    GeneratedSignal[]
  agents              UserAgent[]
  badges              Badge[]            @relation("UserBadges")
}

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String
  icon        String
  users       User[]   @relation("UserBadges")
}

model Position {
  id                  String          @id @default(uuid())
  symbol              String
  signalType          SignalType
  entryPrice          Float
  size                Float
  status              PositionStatus
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  expirationTimestamp DateTime?
  stopLoss            Float?
  takeProfit          Float?
  pnl                 Float?
  strategyId          String?
  strategy            GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
  userId              String
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model GeneratedSignal {
  id                    String                  @id @default(uuid())
  userId                String
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol                String
  signal                String
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  risk_rating           String
  gpt_confidence_score  String
  sentiment             String
  currentThought        String
  shortTermPrediction   String
  sentimentTransition   String?
  chosenTradingMode     String
  chosenRiskProfile     String
  strategyReasoning     String
  analysisSummary       String?
  newsAnalysis          String?
  disclaimer            String
  type                  SignalGenerationType
  status                GeneratedSignalStatus
  position              Position[]
  createdAt             DateTime                @default(now())
}

model UserAgent {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId           String
  level             Int
  status            AgentStatus
  deploymentEndTime DateTime?
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

enum AgentStatus {
  IDLE
  DEPLOYED
}

enum SignalGenerationType {
    INSTANT
    CUSTOM
}

enum GeneratedSignalStatus {
    PENDING_EXECUTION
    EXECUTED
    DISMISSED
    ARCHIVED
}
