// This is a SAMPLE Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String            @id @default(cuid())
  username          String            @unique
  shadowId          String            @unique
  weeklyPoints      Int               @default(0)
  airdropPoints     Int               @default(0)
  status            String?           @default("Guest") // e.g., Guest, Registered
  claimedMissions   String[]          @default([])
  email             String?           @unique
  phone             String?
  wallet_address    String?
  wallet_type       String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  badges            Badge[]
  positions         Position[]
  generatedSignals  GeneratedSignal[]

  @@map("users")
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("badges")
}

model Position {
  id                   String         @id @default(cuid())
  userId               String
  symbol               String
  signalType           SignalType
  status               PositionStatus
  entryPrice           Float
  closePrice           Float?
  stopLoss             Float
  takeProfit           Float
  openTimestamp        DateTime?      @default(now())
  closeTimestamp       DateTime?
  expirationTimestamp  DateTime?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?
  strategyId           String?
  type                 PositionType
  tradingMode          String
  riskProfile          String
  gpt_confidence_score String
  sentiment            String
  size                 Float          @default(1)
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("positions")
}

model GeneratedSignal {
  id                   String       @id @default(cuid())
  userId               String
  symbol               String
  signal               String
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  risk_rating          String
  gpt_confidence_score String
  sentiment            String
  currentThought       String
  shortTermPrediction  String?
  sentimentTransition  String?
  analysisSummary      String?
  newsAnalysis         String?
  disclaimer           String
  type                 String
  chosenTradingMode    String?
  chosenRiskProfile    String?
  status               SignalStatus
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_signals")
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

enum PositionType {
  INSTANT
  CUSTOM
}

enum SignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
  ERROR
}
