// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  username            String
  shadowId            String   @unique
  status              String   @default("Guest")
  weeklyPoints        Int      @default(0)
  airdropPoints       Int      @default(0)
  claimedMissions     String[]
  badges              Badge[]  @relation("UserBadges")
  positions           Position[]
  generatedSignals    GeneratedSignal[]

  // Airdrop registration fields
  wallet_address      String?
  wallet_type         String?
  email               String?  @unique
  phone               String?
  x_handle            String?
  telegram_handle     String?
  youtube_handle      String?
}

model Position {
  id                    String      @id @default(cuid())
  userId                String
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime    @default(now())
  symbol                String
  signalType            SignalType
  status                PositionStatus
  entryPrice            Float
  size                  Float       @default(1)
  stopLoss              Float
  takeProfit            Float
  openTimestamp         DateTime?
  closeTimestamp        DateTime?
  expirationTimestamp   DateTime?
  pnl                   Float?
  gainedXp              Int?
  gainedAirdropPoints   Int?
  gasPaid               Float?
  blocksTrained         Int?
  strategyId            String?
  type                  PositionType
  tradingMode           String
  riskProfile           String
  gpt_confidence_score  String?
  sentiment             String?
}

model GeneratedSignal {
  id                    String        @id @default(cuid())
  userId                String
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime      @default(now())
  status                SignalStatus
  symbol                String
  signal                String
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  risk_rating           String
  gpt_confidence_score  String
  sentiment             String
  currentThought        String
  shortTermPrediction   String
  sentimentTransition   String?
  chosenTradingMode     String?
  chosenRiskProfile     String?
  strategyReasoning     String
  analysisSummary       String
  newsAnalysis          String?
  disclaimer            String
  type                  String
}

model Badge {
  id     String @id @default(cuid())
  name   String @unique
  users  User[] @relation("UserBadges")
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
  CANCELLED
  EXPIRED
}

enum PositionType {
  INSTANT
  CUSTOM
}

enum SignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
  ERROR
}
