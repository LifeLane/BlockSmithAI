// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  shadowId        String   @unique
  email           String?  @unique
  phone           String?
  wallet_address  String?
  wallet_type     String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?
  status          String   @default("Guest")
  weeklyPoints    Int      @default(0)
  airdropPoints   Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  claimedMissions String[]
  badges          Badge[]
  positions       Position[]
  generatedSignals GeneratedSignal[]

  @@index([username])
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())

  @@index([userId])
}

model Position {
  id                   String     @id @default(cuid())
  userId               String
  symbol               String
  signalType           SignalType
  status               String     @default("OPEN") // OPEN, PENDING, CLOSED
  entryPrice           Float
  closePrice           Float?
  stopLoss             Float?
  takeProfit           Float?
  pnl                  Float?
  size                 Float      @default(1)
  tradingMode          String
  riskProfile          String
  type                 String     @default("INSTANT") // INSTANT, CUSTOM
  sentiment            String?
  gpt_confidence_score String?
  gainedXp             Int?
  gainedAirdropPoints  Float?
  gasPaid              Float?
  blocksTrained        Int?
  createdAt            DateTime   @default(now())
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  strategyId           String?    @unique
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  signal               GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId, status])
  @@index([symbol])
}

model GeneratedSignal {
  id                   String   @id @default(cuid())
  userId               String
  symbol               String
  signal               SignalType
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  risk_rating          String
  gpt_confidence_score String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String
  analysisSummary      String
  newsAnalysis         String?
  status               String   @default("PENDING_EXECUTION") // PENDING_EXECUTION, EXECUTED, DISMISSED
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position             Position?

  @@index([userId, status])
}

enum SignalType {
  BUY
  SELL
}
