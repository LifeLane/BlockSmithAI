// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  username        String   @unique
  shadowId        String   @unique
  status          String   @default("Guest")
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  claimedMissions String[]

  // Airdrop Registration Info
  email           String?
  phone           String?
  wallet_address  String?
  wallet_type     String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?

  // Relations
  badges   Badge[]
  positions Position[]
  signals  GeneratedSignal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String
  icon        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol    String
  signalType String // BUY or SELL
  status    String   // OPEN or CLOSED or PENDING
  entryPrice Float
  stopLoss  Float?
  takeProfit Float?
  closePrice Float?
  pnl       Float?
  size      Float    @default(1)
  
  // Strategy details
  tradingMode String
  riskProfile String
  type        String // INSTANT or CUSTOM
  sentiment   String
  gpt_confidence_score String
  strategyId  String?  @unique

  // Timestamps
  createdAt       DateTime  @default(now())
  openTimestamp   DateTime?
  closeTimestamp  DateTime?
  updatedAt       DateTime  @updatedAt

  // Analytics/Rewards
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?
}

model GeneratedSignal {
  id                   String    @id @default(uuid())
  userId               String
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol               String
  signal               String // BUY or SELL
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  gpt_confidence_score String
  risk_rating          String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String
  analysisSummary      String
  newsAnalysis         String?
  status               String    // PENDING_EXECUTION, EXECUTED, DISMISSED
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}