// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ==============================================================================
// User Model
// ==============================================================================

model User {
  id              String  @id @default(cuid())
  username        String  @unique
  shadowId        String  @unique
  weeklyPoints    Int     @default(0)
  airdropPoints   Int     @default(0)
  status          String
  claimedMissions String  @default("[]") // Stored as a JSON string array

  // Optional contact/wallet info for airdrop
  email           String? @unique
  phone           String?
  wallet_address  String?
  wallet_type     String? // e.g., 'ETH', 'SOL', 'TON'
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?

  // Relations
  badges          Badge[]
  positions       Position[]
  signals         GeneratedSignal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

// ==============================================================================
// Trading Models
// ==============================================================================

model Position {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy              GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
  strategyId            String?  @unique
  
  symbol                String
  signalType            String   // Was SignalType enum: 'BUY' or 'SELL'
  status                String   @default("PENDING") // Was PositionStatus enum
  type                  String   // Was PositionType enum: 'INSTANT' or 'CUSTOM'
  
  entryPrice            Float
  stopLoss              Float?
  takeProfit            Float?
  size                  Float    @default(1)
  
  closePrice            Float?
  pnl                   Float?
  
  // Timestamps
  createdAt             DateTime @default(now())
  openTimestamp         DateTime?
  closeTimestamp        DateTime?
  
  // Metadata from Signal
  tradingMode           String
  riskProfile           String
  sentiment             String
  gpt_confidence_score  String
  strategyReasoning     String?
  analysisSummary       String?
  newsAnalysis          String?
  sentimentTransition   String?

  // Post-trade results
  gainedXp              Int?
  gainedAirdropPoints   Int?
  gasPaid               Float?
  blocksTrained         Int?
}

model GeneratedSignal {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position              Position?

  symbol                String
  signal                String   // Was SignalType enum
  status                String   @default("PENDING_EXECUTION") // Was GeneratedSignalStatus enum
  
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  risk_rating           String
  gpt_confidence_score  String
  sentiment             String
  currentThought        String
  shortTermPrediction   String
  chosenTradingMode     String
  chosenRiskProfile     String
  strategyReasoning     String
  analysisSummary       String
  newsAnalysis          String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
