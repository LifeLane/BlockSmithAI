// prisma/schema.prisma

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// =================================
//        USER & AUTH MODELS
// =================================

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  shadowId        String   @unique
  email           String?  @unique
  phone           String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?
  wallet_address  String?
  wallet_type     String?
  status          String?  @default("Guest")
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  claimedMissions String[]
  badges          Badge[]
  positions       Position[]
  signals         GeneratedSignal[]
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

// =================================
//      TRADING & SIGNAL MODELS
// =================================

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

enum PositionType {
  INSTANT
  CUSTOM
}

model Position {
  id                    String         @id @default(cuid())
  userId                String
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategyId            String?        @unique
  strategy              GeneratedSignal? @relation(fields: [strategyId], references: [id])
  symbol                String
  signalType            SignalType
  status                PositionStatus @default(PENDING)
  type                  PositionType
  entryPrice            Float
  stopLoss              Float?
  takeProfit            Float?
  size                  Float          @default(1.0)
  tradingMode           String
  riskProfile           String
  sentiment             String
  sentimentTransition   String? // AI's view on sentiment shift
  gpt_confidence_score  String
  analysisSummary       String?
  newsAnalysis          String?
  strategyReasoning     String?

  createdAt        DateTime  @default(now())
  openTimestamp    DateTime?
  closeTimestamp   DateTime?
  closePrice       Float?
  pnl              Float?
  gainedXp         Int?
  gainedAirdropPoints Int?
  gasPaid          Float?
  blocksTrained    Int?
}

enum GeneratedSignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
}

model GeneratedSignal {
  id                    String                @id @default(cuid())
  userId                String
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  position              Position?
  symbol                String
  signal                SignalType
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  gpt_confidence_score  String
  risk_rating           String
  sentiment             String
  sentimentTransition   String? // AI's view on sentiment shift
  currentThought        String
  shortTermPrediction   String
  chosenTradingMode     String
  chosenRiskProfile     String
  strategyReasoning     String
  analysisSummary       String
  newsAnalysis          String?
  status                GeneratedSignalStatus @default(PENDING_EXECUTION)
  createdAt             DateTime              @default(now())
}
