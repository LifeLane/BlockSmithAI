// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String            @id @default(cuid())
  shadowId          String            @unique
  username          String            @unique
  email             String?           @unique
  phone             String?
  wallet_address    String?
  wallet_type       String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  status            String            @default("Guest")
  weeklyPoints      Int               @default(0)
  airdropPoints     Float             @default(0)
  claimedMissions   String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  positions         Position[]
  generatedSignals  GeneratedSignal[]
  badges            Badge[]
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
  id                   String        @id @default(cuid())
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol               String
  signalType           String // BUY or SELL
  status               String // PENDING, OPEN, or CLOSED
  entryPrice           Float
  stopLoss             Float?
  takeProfit           Float?
  size                 Float         @default(1)
  tradingMode          String
  riskProfile          String
  type                 String // INSTANT or CUSTOM
  sentiment            String?
  gpt_confidence_score String?
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  closePrice           Float?
  pnl                  Float?
  gainedXp             Float?
  gainedAirdropPoints  Float?
  gasPaid              Float?
  blocksTrained        Int?
  strategyId           String?       @unique
  strategy             GeneratedSignal?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model GeneratedSignal {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position            Position? @relation(fields: [positionId], references: [id])
  positionId          String?  @unique
  symbol              String
  signal              String
  status              String
  entry_zone          String
  stop_loss           String
  take_profit         String
  confidence          String
  gpt_confidence_score String
  risk_rating         String
  sentiment           String
  currentThought      String
  shortTermPrediction String
  chosenTradingMode   String
  chosenRiskProfile   String
  strategyReasoning   String
  analysisSummary     String
  newsAnalysis        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}