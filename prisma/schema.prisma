// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String    @id @default(cuid())
  username          String
  shadowId          String    @unique
  status            String    @default("Guest")
  email             String?
  phone             String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  wallet_address    String?
  wallet_type       String?
  weeklyPoints      Int       @default(0)
  airdropPoints     Int       @default(0)
  claimedMissions   String[]
  badges            UserBadge[]
  positions         Position[]
  generatedSignals  GeneratedSignal[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Position {
  id                    String         @id @default(cuid())
  userId                String
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol                String
  signalType            SignalType
  status                PositionStatus
  entryPrice            Float
  size                  Float          @default(1)
  closePrice            Float?
  pnl                   Float?
  openTimestamp         DateTime?
  closeTimestamp        DateTime?
  expirationTimestamp   DateTime?
  stopLoss              Float?
  takeProfit            Float?
  strategyId            String?
  type                  PositionType
  tradingMode           String
  riskProfile           String
  gpt_confidence_score  String
  sentiment             String?
  gainedXp              Int?
  gainedAirdropPoints   Int?
  gasPaid               Float?
  blocksTrained         Int?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model GeneratedSignal {
  id                    String       @id @default(cuid())
  userId                String
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  status                SignalStatus
  symbol                String
  signal                String
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  risk_rating           String
  gpt_confidence_score  String
  sentiment             String
  currentThought        String
  shortTermPrediction   String
  sentimentTransition   String?
  chosenTradingMode     String?
  chosenRiskProfile     String?
  strategyReasoning     String?
  analysisSummary       String?
  newsAnalysis          String?
  disclaimer            String?
  type                  String
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

model Badge {
  id    String      @id @default(cuid())
  name  String
  users UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, badgeId])
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
  CANCELLED
}

enum SignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
  ERROR
}

enum PositionType {
  INSTANT
  CUSTOM
}
