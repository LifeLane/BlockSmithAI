
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id @default(cuid())
  shadowId        String   @unique @default(cuid())
  username        String
  status          String   @default("Guest") // Guest, Registered
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  claimedMissions String[]
  email           String?
  phone           String?
  wallet_address  String?
  wallet_type     String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?

  badges   Badge[]
  positions Position[]
  signals  GeneratedSignal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
  id                   String     @id @default(cuid())
  symbol               String
  signalType           String // BUY or SELL
  status               String // PENDING, OPEN, or CLOSED
  entryPrice           Float
  stopLoss             Float?
  takeProfit           Float?
  size                 Float      @default(1)
  tradingMode          String
  riskProfile          String
  type                 String // INSTANT or CUSTOM
  sentiment            String
  gpt_confidence_score String
  closePrice           Float?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?

  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  
  strategy             GeneratedSignal? @relation(fields: [strategyId], references: [id])
  strategyId           String?    @unique

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}


model GeneratedSignal {
    id        String @id @default(cuid())
    symbol    String
    signal    String // BUY or SELL
    status    String // PENDING_EXECUTION, EXECUTED, DISMISSED
    
    // Core AI output
    entry_zone           String
    stop_loss            String
    take_profit          String
    confidence           String
    risk_rating          String
    gpt_confidence_score String
    sentiment            String
    currentThought       String
    shortTermPrediction  String
    sentimentTransition  String?
    chosenTradingMode    String
    chosenRiskProfile    String
    strategyReasoning    String
    analysisSummary      String
    newsAnalysis         String?
    
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    
    executedPosition Position?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
