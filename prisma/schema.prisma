
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  username          String   @unique
  shadowId          String   @unique
  status            String
  weeklyPoints      Int      @default(0)
  airdropPoints     Int      @default(0)
  wallet_address    String?
  wallet_type       String?
  email             String?  @unique
  phone             String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  positions       Position[]
  generatedSignals GeneratedSignal[]
  badges          Badge[]           @relation("UserBadges")
  claimedMissions String[]
  userAgents      UserAgent[]
  claimedSpecialOps String[]
}

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  users       User[]   @relation("UserBadges")
}

enum SignalType {
  BUY
  SELL
  HOLD
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

model Position {
  id                  String         @id @default(cuid())
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol              String
  signalType          SignalType
  entryPrice          Float
  size                Float
  status              PositionStatus
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  expirationTimestamp DateTime?
  stopLoss            Float?
  takeProfit          Float?
  pnl                 Float?
  strategyId          String?        @map("strategy_id")
  strategy            GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

enum AgentStatus {
  IDLE
  DEPLOYED
}

model UserAgent {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId           String
  level             Int
  status            AgentStatus
  deploymentEndTime DateTime?
  
  @@unique([userId, agentId])
}

enum SignalGenerationType {
  INSTANT
  CUSTOM
}

enum GeneratedSignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
}

model GeneratedSignal {
  id                 String                @id @default(cuid())
  userId             String
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol             String
  signal             String
  entry_zone         String
  stop_loss          String
  take_profit        String
  confidence         String
  risk_rating        String
  gpt_confidence_score String
  sentiment          String
  currentThought     String?
  shortTermPrediction String?
  sentimentTransition String?
  chosenTradingMode  String
  chosenRiskProfile  String
  strategyReasoning  String
  analysisSummary    String?
  newsAnalysis       String?
  disclaimer         String?
  type               SignalGenerationType
  status             GeneratedSignalStatus
  createdAt          DateTime              @default(now())
  
  executedPosition   Position?
}

    