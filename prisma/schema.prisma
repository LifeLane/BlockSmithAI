// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  username        String   @unique
  shadowId        String   @unique
  email           String?  @unique
  phone           String?
  wallet_address  String?
  wallet_type     String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?
  status          String // e.g., 'Guest', 'Registered', 'Verified'
  weeklyPoints    Int
  airdropPoints   Int
  claimedMissions String[]

  // Relations
  positions       Position[]
  signals         GeneratedSignal[]
  badges          Badge[]

  createdAt DateTime @default(now())
}

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String
  icon        String
  createdAt   DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

model Position {
  id                   String         @id @default(uuid())
  userId               String
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol               String
  signalType           SignalType
  status               PositionStatus
  entryPrice           Float
  stopLoss             Float?
  takeProfit           Float?
  size                 Float          @default(1)
  tradingMode          String
  riskProfile          String
  type                 String
  sentiment            String
  gpt_confidence_score String
  createdAt            DateTime       @default(now())
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  closePrice           Float?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?
  strategyReasoning    String?
  analysisSummary      String?
  newsAnalysis         String?

  // Relation to GeneratedSignal
  strategyId String          @unique
  strategy   GeneratedSignal @relation(fields: [strategyId], references: [id], onDelete: Cascade)
}

enum GeneratedSignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
}

model GeneratedSignal {
  id                    String                @id @default(uuid())
  userId                String
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol                String
  signal                SignalType
  status                GeneratedSignalStatus
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  gpt_confidence_score  String
  risk_rating           String
  sentiment             String
  currentThought        String
  shortTermPrediction   String
  sentimentTransition   String?
  chosenTradingMode     String
  chosenRiskProfile     String
  strategyReasoning     String
  analysisSummary       String
  newsAnalysis          String?
  createdAt             DateTime              @default(now())

  // Relation to Position (1-to-1)
  position Position?
}
