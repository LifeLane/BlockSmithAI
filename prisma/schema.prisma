// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  username        String   @unique
  shadowId        String   @unique
  email           String?  @unique
  phone           String?
  wallet_address  String?
  wallet_type     String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?
  status          String   @default("Guest") // e.g., Guest, Registered, Verified

  // Points and Progress
  weeklyPoints    Int      @default(0)
  airdropPoints   Float    @default(0)

  // Relationships
  positions        Position[]
  generatedSignals GeneratedSignal[]
  badges           Badge[]

  // Missions
  claimedMissions String[]
}

model Position {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  signalType SignalType
  status    PositionStatus @default(OPEN)

  // Financials
  entryPrice Float
  closePrice Float?
  size       Float        @default(1)
  pnl        Float?
  stopLoss   Float?
  takeProfit Float?

  // Analytics & Rewards
  gainedXp             Int?
  gainedAirdropPoints  Float?
  gasPaid              Float?
  blocksTrained        Int?
  type                 PositionType @default(INSTANT)
  tradingMode          String
  riskProfile          String
  sentiment            String?
  gpt_confidence_score String?

  openTimestamp  DateTime?
  closeTimestamp DateTime?

  // Link to the signal that generated this position
  signal     GeneratedSignal? @relation(fields: [strategyId], references: [id])
  strategyId String?          @unique
}

model GeneratedSignal {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  symbol               String
  signal               SignalType
  status               GeneratedSignalStatus @default(PENDING_EXECUTION)
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  risk_rating          String
  gpt_confidence_score String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  sentimentTransition  String?
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String?
  analysisSummary      String?
  newsAnalysis         String?
  position             Position?
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

enum GeneratedSignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
}

enum SignalType {
  BUY
  SELL
}

enum PositionType {
  INSTANT
  CUSTOM
}
