// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType      = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  shadowId          String    @unique
  status            String
  claimedMissions   String[]
  email             String?
  phone             String?
  wallet_address    String?
  wallet_type       String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  weeklyPoints      Int       @default(0)
  airdropPoints     Float     @default(0)
  positions         Position[]
  generated_signals GeneratedSignal[]
  badges            Badge[]
}

model Position {
  id                   String     @id @default(uuid())
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  symbol               String
  signalType           String
  status               String // OPEN, CLOSED, PENDING
  entryPrice           Float
  stopLoss             Float?
  takeProfit           Float?
  size                 Float      @default(1)
  tradingMode          String
  riskProfile          String
  type                 String // INSTANT or CUSTOM
  sentiment            String?
  gpt_confidence_score String?
  createdAt            DateTime   @default(now())
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  closePrice           Float?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?
  strategy             GeneratedSignal? @relation(fields: [strategyId], references: [id])
  strategyId           String?          @unique
}

model GeneratedSignal {
  id                   String     @id @default(uuid())
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  symbol               String
  signal               String
  status               String // PENDING_EXECUTION, EXECUTED, DISMISSED
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  gpt_confidence_score String
  risk_rating          String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  sentimentTransition  String?
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String
  analysisSummary      String
  newsAnalysis         String?
  createdAt            DateTime   @default(now())
  Position             Position?
}

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String
  icon        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
}
