// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid()) @db.Uuid
  username        String   @unique
  status          String? // Guest, Registered
  shadowId        String?  @unique
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  claimedMissions String   @default("[]") // Storing list as a JSON string
  wallet_address  String?
  wallet_type     String?
  email           String?  @unique
  phone           String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  badges          Badge[]
  positions       Position[]
  generatedSignals GeneratedSignal[]
}

model Badge {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String
  icon        String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @db.Uuid
}


model Position {
  id                   String    @id @default(uuid()) @db.Uuid
  userId               String    @db.Uuid
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  strategyId           String?   @db.Uuid
  generatedSignal      GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)

  // Core Trade Details
  symbol               String
  signalType           String    // "BUY" | "SELL"
  status               String    // "PENDING" | "OPEN" | "CLOSED"
  type                 String    // "INSTANT" | "CUSTOM"

  // Pricing
  entryPrice           Float
  closePrice           Float?
  stopLoss             Float
  takeProfit           Float
  pnl                  Float?
  
  // Timestamps
  createdAt            DateTime  @default(now())
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  
  // AI Strategy Details
  size                 Float     @default(1)
  sentiment            String?
  gpt_confidence_score String?
  analysisSummary      String?
  newsAnalysis         String?
  strategyReasoning    String?
  tradingMode          String?
  riskProfile          String?
  sentimentTransition  String?

  // Rewards
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?
}

model GeneratedSignal {
  id                   String @id @default(uuid()) @db.Uuid
  userId               String @db.Uuid
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relation to Position
  position             Position?

  // AI Output
  symbol               String
  signal               String // "BUY" | "SELL"
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  risk_rating          String
  gpt_confidence_score String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String
  analysisSummary      String
  newsAnalysis         String
  
  // Metadata
  status               String   @default("PENDING_EXECUTION") // "PENDING_EXECUTION" | "EXECUTED" | "DISMISSED"
  createdAt            DateTime @default(now())
}
