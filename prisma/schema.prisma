// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String            @id @default(cuid())
  username          String            @unique
  shadowId          String            @unique
  email             String?           @unique
  phone             String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  wallet_address    String?
  wallet_type       String?
  status            String            @default("Guest") // Guest, Registered
  weeklyPoints      Int               @default(0)
  airdropPoints     Int               @default(0)
  claimedMissions   String[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  positions         Position[]
  generated_signals GeneratedSignal[]
  badges            Badge[]           @relation("UserBadges")
}

model Position {
  id                    String         @id @default(cuid())
  symbol                String
  signalType            SignalType
  entryPrice            Float
  size                  Float          @default(1)
  status                PositionStatus
  openTimestamp         DateTime?
  closeTimestamp        DateTime?
  expirationTimestamp   DateTime?
  stopLoss              Float?
  takeProfit            Float?
  pnl                   Float?
  strategyId            String?
  type                  PositionType
  tradingMode           String
  riskProfile           String
  gpt_confidence_score  String?
  sentiment             String?
  gainedXp              Int?
  gainedAirdropPoints   Int?
  gasPaid               Float?
  blocksTrained         Int?
  userId                String
  user                  User           @relation(fields: [userId], references: [id])
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model GeneratedSignal {
  id                   String       @id @default(cuid())
  symbol               String
  signal               String
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  risk_rating          String
  gpt_confidence_score String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  sentimentTransition  String?
  chosenTradingMode    String?
  chosenRiskProfile    String?
  strategyReasoning    String?
  analysisSummary      String?
  newsAnalysis         String?
  disclaimer           String
  type                 String
  userId               String
  user                 User         @relation(fields: [userId], references: [id])
  status               SignalStatus @default(PENDING_EXECUTION)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model Badge {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserBadges")
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

enum PositionType {
  INSTANT
  CUSTOM
}

enum SignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
  ERROR
}
