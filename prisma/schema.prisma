// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String    @id @default(cuid())
  username          String    @unique
  shadowId          String    @unique
  weeklyPoints      Int       @default(0)
  airdropPoints     Int       @default(0)
  status            String    @default("Guest")
  claimedMissions   String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  email             String?   @unique
  phone             String?
  wallet_address    String?
  wallet_type       String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  positions         Position[]
  generatedSignals  GeneratedSignal[]
  badges            Badge[]

  @@map("users")
}

model Position {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol              String
  signalType          SignalType
  status              PositionStatus @default(OPEN)
  entryPrice          Float
  closePrice          Float?
  stopLoss            Float
  takeProfit          Float
  size                Float    @default(1)
  pnl                 Float?
  openTimestamp       DateTime @default(now())
  closeTimestamp      DateTime?
  gainedXp            Int?
  gainedAirdropPoints Int?
  gasPaid             Float?
  blocksTrained       Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  tradingMode         String
  riskProfile         String
  type                PositionType @default(INSTANT)
  sentiment           String?
  gpt_confidence_score String?
  strategyId          String?

  @@map("positions")
}

model GeneratedSignal {
  id                  String       @id @default(cuid())
  userId              String
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol              String
  signal              SignalType
  entry_zone          String
  stop_loss           String
  take_profit         String
  confidence          String
  gpt_confidence_score String
  risk_rating         String
  sentiment           String
  currentThought      String
  shortTermPrediction String
  chosenTradingMode   String?
  chosenRiskProfile   String?
  strategyReasoning   String?
  analysisSummary     String?
  newsAnalysis        String?
  status              SignalStatus @default(PENDING_EXECUTION)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@map("generated_signals")
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("badges")
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  OPEN
  CLOSED
  PENDING
}

enum PositionType {
    INSTANT
    CUSTOM
}

enum SignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
}
