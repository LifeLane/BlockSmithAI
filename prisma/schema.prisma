// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider     = "prisma-client-js"
  engineType   = "library"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  username        String?
  shadowId        String?
  status          String   @default("Guest")
  email           String?  @unique
  phone           String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?
  wallet_address  String?
  wallet_type     String?
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  claimedMissions String[]

  positions        Position[]
  generated_signals GeneratedSignal[]
  badges           Badge[]
}

model Position {
  id                  String   @id @default(cuid())
  userId              String
  symbol              String
  signalType          String // "BUY" or "SELL"
  status              String // "OPEN" or "CLOSED" or "PENDING"
  entryPrice          Float
  stopLoss            Float?
  takeProfit          Float?
  size                Float    @default(1)
  tradingMode         String
  riskProfile         String
  type                String   // "INSTANT" or "CUSTOM"
  sentiment           String?
  gpt_confidence_score String?

  createdAt           DateTime  @default(now())
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  closePrice          Float?
  pnl                 Float?
  gainedXp            Int?
  gainedAirdropPoints Int?
  gasPaid             Float?
  blocksTrained       Int?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategyId String?   @unique
  strategy   GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
}

model GeneratedSignal {
  id                   String   @id @default(cuid())
  userId               String
  symbol               String
  signal               String // "BUY" or "SELL"
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  gpt_confidence_score String
  risk_rating          String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  sentimentTransition  String?
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String
  analysisSummary      String
  newsAnalysis         String?
  status               String   @default("PENDING_EXECUTION") // "PENDING_EXECUTION", "EXECUTED", "DISMISSED"
  createdAt            DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position Position?
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
