// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  username          String     @unique
  shadowId          String     @unique
  status            String     @default("Guest") // e.g., Guest, Registered, Active Analyst
  weeklyPoints      Int        @default(0)
  airdropPoints     Int        @default(0)
  wallet_address    String?
  wallet_type       String?
  email             String?    @unique
  phone             String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  claimedMissions   String[]
  claimedSpecialOps String[]
  badges            Badge[]    @relation("UserBadges")
  positions         Position[]
  userAgents        UserAgent[]
}

model Badge {
  id      String   @id @default(uuid())
  name    String
  users   User[]   @relation("UserBadges")
}

model Position {
  id                  String         @id @default(uuid())
  user                User           @relation(fields: [userId], references: [id])
  userId              String
  symbol              String
  signalType          SignalType
  entryPrice          Float
  size                Float
  status              PositionStatus @default(OPEN)
  openTimestamp       DateTime?      @default(now())
  closeTimestamp      DateTime?
  expirationTimestamp DateTime?
  closePrice          Float?
  pnl                 Float?
  stopLoss            Float?
  takeProfit          Float?
  strategyId          String?
}

model UserAgent {
  id                String    @id @default(uuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  agentId           String
  level             Int       @default(1)
  status            String    @default("IDLE") // IDLE, DEPLOYED
  deploymentEndTime DateTime?

  @@unique([userId, agentId])
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}