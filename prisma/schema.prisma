// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid())
  username          String
  shadowId          String       @unique
  status            String
  weeklyPoints      Int          @default(0)
  airdropPoints     Int          @default(0)
  claimedMissions   String[]
  claimedSpecialOps String[]
  createdAt         DateTime     @default(now()) @db.Timestamptz
  updatedAt         DateTime     @default(now()) @updatedAt @db.Timestamptz

  // Optional fields for Airdrop Registration
  email             String?
  phone             String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  wallet_type       String?
  wallet_address    String?

  positions Position[]
  userAgents UserAgent[]
  badges    Badge[]      @relation("UserBadges")
}

model Position {
  id                  String         @id @default(uuid())
  userId              String
  symbol              String
  signalType          SignalType
  status              PositionStatus @default(OPEN)
  entryPrice          Float
  size                Float
  closePrice          Float?
  pnl                 Float?
  stopLoss            Float?
  takeProfit          Float?
  openTimestamp       DateTime?      @db.Timestamptz
  closeTimestamp      DateTime?      @db.Timestamptz
  expirationTimestamp DateTime?      @db.Timestamptz
  strategyId          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAgent {
    id String @id @default(uuid())
    userId String
    agentId String
    level Int @default(1)
    status String // 'IDLE' or 'DEPLOYED'
    deploymentEndTime DateTime? @db.Timestamptz

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([userId, agentId])
}

model Badge {
  id      String @id @default(uuid())
  name    String @unique
  iconUrl String?

  users User[] @relation("UserBadges")
}

enum SignalType {
  BUY
  SELL
  HOLD
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}
