// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  username          String
  shadowId          String     @unique
  status            String // e.g., Guest, Registered
  weeklyPoints      Int        @default(0)
  airdropPoints     Int        @default(0)
  wallet_address    String?
  wallet_type       String?
  email             String?
  phone             String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  claimedMissions   String[]   @default([])
  claimedSpecialOps String[]   @default([])

  positions       Position[]
  generatedSignals GeneratedSignal[]
  agents          UserAgent[]
  badges          Badge[]           @relation("UserBadges")
}

model Badge {
  id    String @id @default(uuid())
  name  String
  users User[] @relation("UserBadges")
}

model Position {
  id                  String         @id @default(uuid())
  symbol              String
  signalType          SignalType
  entryPrice          Float
  size                Float
  status              PositionStatus
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  expirationTimestamp DateTime?
  stopLoss            Float?
  takeProfit          Float?
  pnl                 Float?
  strategyId          String?
  userId              String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedSignal     GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

model GeneratedSignal {
  id                      String      @id @default(uuid())
  userId                  String
  symbol                  String
  signal                  String
  entry_zone              String
  stop_loss               String
  take_profit             String
  confidence              String
  risk_rating             String
  gpt_confidence_score    String
  sentiment               String
  currentThought          String
  shortTermPrediction     String
  sentimentTransition     String?
  chosenTradingMode       String
  chosenRiskProfile       String
  strategyReasoning       String
  analysisSummary         String
  newsAnalysis            String?
  disclaimer              String
  type                    SignalGenerationType
  status                  GeneratedSignalStatus
  createdAt               DateTime    @default(now())
  user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  position                Position[]
}

enum SignalGenerationType {
  INSTANT
  CUSTOM
}

enum GeneratedSignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
  ERROR
}

model UserAgent {
  id                String      @id @default(uuid())
  userId            String
  agentId           String
  level             Int         @default(1)
  status            AgentStatus
  deploymentEndTime DateTime?
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, agentId])
}

enum AgentStatus {
  IDLE
  DEPLOYED
}
