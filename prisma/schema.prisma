// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String              @id @default(uuid()) @db.Uuid
  username         String              @unique
  status           String?
  shadowId         String?             @unique
  weeklyPoints     Int                 @default(0)
  airdropPoints    Int                 @default(0)
  wallet_address   String?
  wallet_type      String?
  email            String?
  phone            String?
  x_handle         String?
  telegram_handle  String?
  youtube_handle   String?
  badges           Badge[]             @relation("UserBadges")
  consoleInsights  ConsoleInsight[]
  signals          SignalHistoryItem[]
  positions        Position[]
  userAgents       UserAgent[]
}

model Badge {
  id    String @id @default(uuid()) @db.Uuid
  name  String @unique
  users User[] @relation("UserBadges")
}

model ConsoleInsight {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  content   String
  timestamp DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model SignalHistoryItem {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  signalType String
  symbol     String
  price      Float
  timestamp  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
}

model Position {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @db.Uuid
  symbol         String
  signalType     String    // 'BUY' | 'SELL'
  entryPrice     Float
  size           Float
  status         String    // 'OPEN' | 'CLOSED'
  openTimestamp  DateTime  @default(now())
  closeTimestamp DateTime?
  closePrice     Float?
  pnl            Float?
  stopLoss       Float?
  takeProfit     Float?
  user           User      @relation(fields: [userId], references: [id])
}

// Agent model will be static/predefined in the application logic, not in DB
// UserAgent will link users to agents and their level/status
model UserAgent {
  id                String    @id @default(uuid()) @db.Uuid
  userId            String    @db.Uuid
  agentId           String    // ID linking to the static Agent definition
  level             Int
  status            String    // 'IDLE' | 'DEPLOYED'
  deploymentEndTime DateTime?
  user              User      @relation(fields: [userId], references: [id])
}
