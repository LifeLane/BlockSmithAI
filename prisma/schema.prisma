
datasource db {
  provider  = "postgresql"
  url       = env("STORAGE_PRISMA_DATABASE_URL")
  directUrl = env("STORAGE_POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(cuid())
  shadowId        String   @unique @default(cuid())
  username        String   @default("Analyst")
  status          String   @default("Guest") // e.g., Guest, Registered
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  claimedMissions String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  email           String?
  phone           String?
  wallet_address  String?
  wallet_type     String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?

  badges   Badge[]
  positions Position[]
  signals   GeneratedSignal[]
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Position {
  id                   String     @id @default(cuid())
  userId               String
  symbol               String
  signalType           String // BUY or SELL
  status               String // PENDING, OPEN, or CLOSED
  entryPrice           Float
  stopLoss             Float?
  takeProfit           Float?
  size                 Float      @default(1)
  tradingMode          String
  riskProfile          String
  type                 String // INSTANT or CUSTOM
  sentiment            String?
  gpt_confidence_score String?
  createdAt            DateTime   @default(now())
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  closePrice           Float?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?

  strategyId           String?    @unique
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy             GeneratedSignal? @relation(fields: [strategyId], references: [id])
}

model GeneratedSignal {
  id                    String   @id @default(cuid())
  userId                String
  symbol                String
  signal                String   // BUY or SELL
  entry_zone            String
  stop_loss             String
  take_profit           String
  confidence            String
  gpt_confidence_score  String
  risk_rating           String
  sentiment             String
  currentThought        String
  shortTermPrediction   String
  chosenTradingMode     String
  chosenRiskProfile     String
  strategyReasoning     String
  analysisSummary       String
  newsAnalysis          String?
  status                String   // PENDING_EXECUTION, EXECUTED, DISMISSED
  createdAt             DateTime @default(now())

  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  executedPosition     Position?
}
