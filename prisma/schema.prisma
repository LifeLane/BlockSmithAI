// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(uuid())
  username           String
  shadowId           String      @unique
  status             String
  weeklyPoints       Int         @default(0)
  airdropPoints      Int         @default(0)
  wallet_address     String?
  wallet_type        String?
  email              String?     @unique
  phone              String?
  x_handle           String?
  telegram_handle    String?
  youtube_handle     String?
  claimedMissions    String[]
  claimedSpecialOps  String[]
  badges             Badge[]     @relation("UserBadges")
  positions          Position[]
  userAgents         UserAgent[]

  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Badge {
  id      String   @id @default(uuid())
  name    String   @unique
  users   User[]   @relation("UserBadges")
}

model Position {
  id                  String          @id @default(uuid())
  user                User            @relation(fields: [userId], references: [id])
  userId              String
  symbol              String
  signalType          SignalType
  status              PositionStatus
  entryPrice          Float
  size                Float
  stopLoss            Float
  takeProfit          Float
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  expirationTimestamp DateTime?
  pnl                 Float?
  closePrice          Float?
  strategyId          String?
}

model UserAgent {
  id                String      @id @default(uuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  agentId           String
  level             Int         @default(1)
  status            AgentStatus
  deploymentEndTime DateTime?
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  OPEN
  CLOSED
}

enum AgentStatus {
  IDLE
  DEPLOYED
}