
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String   @id @default(uuid())
  username            String   @unique
  shadowId            String   @unique
  status              String   @default("Guest")
  weeklyPoints        Int      @default(0)
  airdropPoints       Int      @default(0)
  wallet_address      String?
  wallet_type         String?
  email               String?  @unique
  phone               String?
  x_handle            String?
  telegram_handle     String?
  youtube_handle      String?
  claimedMissions     String[]
  claimedSpecialOps   String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  badges           Badge[]
  positions        Position[]
  generatedSignals GeneratedSignal[]
  userAgents       UserAgent[]
}

model Badge {
  id      String @id @default(uuid())
  name    String @unique
  users   User[]
}

model Position {
  id                  String         @id @default(uuid())
  symbol              String
  signalType          SignalType
  entryPrice          Float
  size                Float          @default(1)
  status              PositionStatus @default(PENDING)
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  expirationTimestamp DateTime?
  stopLoss            Float?
  takeProfit          Float?
  pnl                 Float?
  strategyId          String?        @unique
  createdAt           DateTime       @default(now())
  updatedAt           DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  generatedSignal GeneratedSignal? @relation(fields: [strategyId], references: [id])
}

model GeneratedSignal {
  id                   String                 @id @default(uuid())
  symbol               String
  signal               String
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  risk_rating          String
  gpt_confidence_score String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  sentimentTransition  String?
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String?
  analysisSummary      String?
  newsAnalysis         String?
  disclaimer           String
  type                 SignalGenerationType
  status               GeneratedSignalStatus
  createdAt            DateTime               @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  position Position?
}

model UserAgent {
  id                String      @id @default(uuid())
  agentId           String
  level             Int         @default(1)
  status            AgentStatus @default(IDLE)
  deploymentEndTime DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

enum AgentStatus {
  IDLE
  DEPLOYED
}

enum GeneratedSignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
  ERROR
}

enum SignalGenerationType {
  INSTANT
  CUSTOM
}
