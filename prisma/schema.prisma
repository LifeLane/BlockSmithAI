// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- Enums ---
enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

enum PositionType {
  INSTANT
  CUSTOM
}

enum SignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
  ARCHIVED
  ERROR
}


// --- Models ---
model User {
  id              String   @id @default(cuid())
  username        String   @unique
  shadowId        String   @unique
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  claimedMissions String[]
  badges          Badge[]
  status          String   @default("Guest")
  email           String?
  phone           String?
  wallet_address  String?
  wallet_type     String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?

  positions        Position[]
  generatedSignals GeneratedSignal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Position {
  id                  String         @id @default(cuid())
  userId              String
  user                User           @relation(fields: [userId], references: [id])
  symbol              String
  signalType          SignalType
  status              PositionStatus
  entryPrice          Float
  closePrice          Float?
  stopLoss            Float
  takeProfit          Float
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  expirationTimestamp DateTime?
  pnl                 Float?
  gainedXp            Int?
  gainedAirdropPoints Int?
  gasPaid             Float?
  blocksTrained       Int?
  strategyId          String?
  type                PositionType
  tradingMode         String
  riskProfile         String
  gpt_confidence_score String
  sentiment           String
  size                Float          @default(1.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("positions")
}

model GeneratedSignal {
  id                  String       @id @default(cuid())
  userId              String
  user                User         @relation(fields: [userId], references: [id])
  symbol              String
  signal              String
  entry_zone          String
  stop_loss           String
  take_profit         String
  confidence          String
  risk_rating         String
  gpt_confidence_score String
  sentiment           String
  currentThought      String
  shortTermPrediction String
  type                String
  status              SignalStatus
  disclaimer          String
  chosenTradingMode   String?
  chosenRiskProfile   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("generated_signals")
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@map("badges")
}
