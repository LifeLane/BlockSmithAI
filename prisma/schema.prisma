
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  shadowId        String   @unique @default(cuid())
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  status          String   @default("Guest") // e.g., Guest, Registered
  claimedMissions String[]

  // Optional contact/wallet info
  email           String?  @unique
  phone           String?  @unique
  wallet_address  String?
  wallet_type     String?  // e.g., ETH, SOL
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?

  // Relations
  badges    Badge[]
  positions Position[]
  signals   GeneratedSignal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  signalType String // BUY or SELL
  status    String   // PENDING, OPEN, or CLOSED
  entryPrice Float
  stopLoss   Float?
  takeProfit Float?
  size      Float    @default(1)

  tradingMode String
  riskProfile String
  type        String // INSTANT or CUSTOM
  sentiment   String
  gpt_confidence_score String

  createdAt DateTime  @default(now())
  openTimestamp DateTime?
  closeTimestamp DateTime?
  closePrice Float?
  pnl       Float?

  gainedXp Int?
  gainedAirdropPoints Int?
  gasPaid Float?
  blocksTrained Int?

  strategyId String? @unique
  strategy   GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
}

model GeneratedSignal {
  id           String @id @default(cuid())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  symbol       String
  signal       String // BUY or SELL
  status       String // PENDING_EXECUTION, EXECUTED, DISMISSED
  entry_zone   String
  stop_loss    String
  take_profit  String
  confidence   String
  risk_rating  String
  gpt_confidence_score String
  sentiment    String
  currentThought String
  shortTermPrediction String
  sentimentTransition String?
  chosenTradingMode String
  chosenRiskProfile String
  strategyReasoning String
  analysisSummary String
  newsAnalysis String?
  createdAt DateTime @default(now())
  
  // Relation to the position created from this signal
  Position Position?
}
