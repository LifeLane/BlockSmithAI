// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id @default(cuid())
  shadowId        String   @unique @default(cuid())
  username        String   @default("Analyst")
  email           String?
  phone           String?
  wallet_address  String?
  wallet_type     String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?
  status          String   @default("Guest")
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  claimedMissions String[]
  badges          Badge[]
  positions       Position[]
  signals         GeneratedSignal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
  id                   String     @id @default(cuid())
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  symbol               String
  signalType           String // BUY or SELL
  status               String // OPEN or CLOSED
  entryPrice           Float
  stopLoss             Float
  takeProfit           Float
  size                 Float
  tradingMode          String
  riskProfile          String
  type                 String // INSTANT or CUSTOM
  sentiment            String
  gpt_confidence_score String
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  closePrice           Float?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?
  strategyId           String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model GeneratedSignal {
  id                  String   @id @default(cuid())
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  symbol              String
  signal              String // BUY or SELL
  entry_zone          String
  stop_loss           String
  take_profit         String
  confidence          String
  gpt_confidence_score String
  risk_rating         String
  sentiment           String
  currentThought      String
  shortTermPrediction String
  chosenTradingMode   String
  chosenRiskProfile   String
  strategyReasoning   String
  analysisSummary     String
  newsAnalysis        String?
  status              String   // PENDING_EXECUTION, EXECUTED, DISMISSED
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
