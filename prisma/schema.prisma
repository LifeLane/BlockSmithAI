// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  shadowId        String   @unique
  status          String   @default("Guest")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Weekly points for rank, resets periodically
  weeklyPoints    Int      @default(0)
  
  // Lifetime points for airdrop
  airdropPoints   Int      @default(0)

  // Wallet and contact info for airdrop registration
  wallet_address  String?
  wallet_type     String?
  email           String?
  phone           String?
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?

  // Gameplay elements
  claimedMissions String[]
  badges          Badge[]
  positions       Position[]
  generatedSignals GeneratedSignal[]
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Position {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol              String
  signalType          SignalType
  status              PositionStatus
  entryPrice          Float
  stopLoss            Float?
  takeProfit          Float?
  size                Float
  tradingMode         String
  riskProfile         String
  type                PositionType
  sentiment           String
  gpt_confidence_score String
  createdAt           DateTime @default(now())
  openTimestamp       DateTime?
  closeTimestamp      DateTime?
  closePrice          Float?
  pnl                 Float?
  gainedXp            Int?
  gainedAirdropPoints Int?
  gasPaid             Float?
  blocksTrained       Int?
  strategyId          String? @unique
  strategy            GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
}

model GeneratedSignal {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol              String
  signal              SignalType
  entry_zone          String
  stop_loss           String
  take_profit         String
  confidence          String
  gpt_confidence_score String
  risk_rating         String
  sentiment           String
  currentThought      String
  shortTermPrediction String
  chosenTradingMode   String
  chosenRiskProfile   String
  strategyReasoning   String
  analysisSummary     String
  newsAnalysis        String?
  status              GeneratedSignalStatus
  createdAt           DateTime @default(now())
  position            Position?
}


enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  PENDING
  OPEN
  CLOSED
}

enum PositionType {
  INSTANT
  CUSTOM
}

enum GeneratedSignalStatus {
  PENDING_EXECUTION
  EXECUTED
  DISMISSED
}
