// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  username          String
  shadowId          String    @unique
  status            String
  weeklyPoints      Int       @default(0)
  airdropPoints     Int       @default(0)
  wallet_address    String?
  wallet_type       String?
  email             String?
  phone             String?
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?
  claimedMissions   String[]
  claimedSpecialOps String[]
  badges            Badge[]   @relation("UserBadges")
  positions         Position[]
  userAgents        UserAgent[]
}

model Badge {
  id      String @id @default(uuid())
  name    String
  users   User[] @relation("UserBadges")
}

enum SignalType {
  BUY
  SELL
  HOLD
}

enum PositionStatus {
  PENDING // Signal generated, but entry price not hit
  OPEN    // Entry price hit, trade is active
  CLOSED  // Trade closed via SL, TP, manual, or expiration
}

model Position {
  id                  String          @id @default(uuid())
  userId              String
  user                User            @relation(fields: [userId], references: [id])
  symbol              String
  signalType          SignalType
  status              PositionStatus  @default(PENDING)
  entryPrice          Float
  size                Float           @default(1.0)
  openTimestamp       DateTime?
  stopLoss            Float
  takeProfit          Float
  closePrice          Float?
  closeTimestamp      DateTime?
  expirationTimestamp DateTime
  pnl                 Float?
  strategyId          String? // To link back to a specific AI strategy if needed
}

model UserAgent {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  agentId           String
  level             Int       @default(1)
  status            String // e.g., 'IDLE', 'DEPLOYED'
  deploymentEndTime DateTime?
}
