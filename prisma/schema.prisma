// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid()) @db.Uuid
  username        String   @unique
  shadowId        String   @unique @default(cuid())
  weeklyPoints    Int      @default(0)
  airdropPoints   Int      @default(0)
  status          String   @default("Guest")
  claimedMissions String   @default("[]")
  email           String?  @unique
  wallet_address  String?  @unique
  wallet_type     String?
  phone           String?  @unique
  x_handle        String?
  telegram_handle String?
  youtube_handle  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  badges          Badge[]
  generatedSignals GeneratedSignal[]
  positions       Position[]
}

model Badge {
  id          String @id @default(uuid()) @db.Uuid
  name        String
  description String
  icon        String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String @db.Uuid
}

model GeneratedSignal {
  id                   String     @id @default(cuid())
  userId               String     @db.Uuid
  symbol               String
  signal               String
  status               String
  entry_zone           String
  stop_loss            String
  take_profit          String
  confidence           String
  risk_rating          String
  gpt_confidence_score String
  sentiment            String
  currentThought       String
  shortTermPrediction  String
  chosenTradingMode    String
  chosenRiskProfile    String
  strategyReasoning    String     @db.Text
  analysisSummary      String     @db.Text
  newsAnalysis         String     @db.Text
  createdAt            DateTime   @default(now())
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  position             Position?
}

model Position {
  id                   String   @id @default(cuid())
  userId               String   @db.Uuid
  symbol               String
  signalType           String
  status               String
  type                 String
  entryPrice           Float
  stopLoss             Float
  takeProfit           Float
  size                 Float
  openTimestamp        DateTime?
  closeTimestamp       DateTime?
  closePrice           Float?
  pnl                  Float?
  gainedXp             Int?
  gainedAirdropPoints  Int?
  gasPaid              Float?
  blocksTrained        Int?
  tradingMode          String
  riskProfile          String
  sentiment            String
  gpt_confidence_score String
  analysisSummary      String   @db.Text
  newsAnalysis         String   @db.Text
  strategyReasoning    String   @db.Text
  createdAt            DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategyId           String?   @unique @db.Uuid
  generatedSignal      GeneratedSignal? @relation(fields: [strategyId], references: [id], onDelete: SetNull)
}
