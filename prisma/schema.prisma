// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String     @id @default(uuid())
  username            String     @unique
  shadowId            String     @unique
  status              String     @default("Guest")
  weeklyPoints        Int        @default(0)
  airdropPoints       Int        @default(0)
  wallet_address      String?
  wallet_type         String?
  email               String?    @unique
  phone               String?
  x_handle            String?
  telegram_handle     String?
  youtube_handle      String?
  claimedMissions     String[]
  claimedSpecialOps   String[]
  badges              Badge[]    @relation("UserBadges")
  positions           Position[]
  userAgents          UserAgent[]
}

model Badge {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserBadges")
}

model Position {
  id                  String    @id @default(uuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id])
  symbol              String
  signalType          SignalType
  entryPrice          Float
  size                Float
  status              PositionStatus
  openTimestamp       DateTime  @default(now())
  closeTimestamp      DateTime?
  pnl                 Float?
  stopLoss            Float?
  takeProfit          Float?
  expirationTimestamp DateTime?
}

model UserAgent {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  agentId           String
  level             Int       @default(1)
  status            AgentStatus @default(IDLE)
  deploymentEndTime DateTime?
  
  @@unique([userId, agentId])
}

enum SignalType {
  BUY
  SELL
}

enum PositionStatus {
  OPEN
  CLOSED
}

enum AgentStatus {
    IDLE
    DEPLOYED
}
