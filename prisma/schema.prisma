// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

model User {
  id                String    @id @default(cuid())
  shadowId          String    @unique @default(cuid())
  username          String    @default("Analyst")
  weeklyPoints      Int       @default(0)
  airdropPoints     Int       @default(0)
  status            String    @default("Guest") // Guest, Registered
  claimedMissions   String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  // Contact & Wallet Info
  email             String?
  phone             String?
  wallet_address    String?
  wallet_type       String? // ETH, SOL, etc.
  // Social Handles
  x_handle          String?
  telegram_handle   String?
  youtube_handle    String?

  badges   Badge[]
  positions Position[]
  signals   GeneratedSignal[]
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Position {
    id              String @id @default(cuid())
    symbol          String
    signalType      String // "BUY" or "SELL"
    status          String // "OPEN" or "CLOSED"
    entryPrice      Float
    stopLoss        Float
    takeProfit      Float
    size            Float
    tradingMode     String
    riskProfile     String
    type            String
    sentiment       String
    gpt_confidence_score String
    createdAt       DateTime @default(now())
    openTimestamp   DateTime?
    closeTimestamp  DateTime?
    closePrice      Float?
    pnl             Float?
    
    // Foreign key to User
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model GeneratedSignal {
    id              String @id @default(cuid())
    symbol          String
    signal          String // "BUY" or "SELL"
    entry_zone      String
    stop_loss       String
    take_profit     String
    confidence      String
    gpt_confidence_score String
    risk_rating     String
    sentiment       String
    currentThought  String
    shortTermPrediction String
    chosenTradingMode String
    chosenRiskProfile String
    strategyReasoning String
    analysisSummary String
    newsAnalysis    String?
    status          String   @default("PENDING") // PENDING, EXECUTED, DISMISSED
    createdAt       DateTime @default(now())

    // Foreign key to User
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}
